# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:

  # build:
    # branches:
    #   only:
    #     - demo6

    # docker:
    #   # specify the version you desire here
    #   - image: circleci/openjdk:8-jdk

    #   # Specify service dependencies here if necessary
    #   # CircleCI maintains a library of pre-built images
    #   # documented at https://circleci.com/docs/2.0/circleci-images/
    #   # - image: circleci/postgres:9.4

    # working_directory: ~/repo

    # environment:
    #   # Customize the JVM maximum heap limit
    #   MAVEN_OPTS: -Xmx3200m

    # steps:
    #   - checkout

    #   # Download and cache dependencies
    #   - restore_cache:
    #       keys:
    #         - v1-dependencies-{{ checksum "pom.xml" }}
    #         # fallback to using the latest cache if no exact match is found
    #         - v1-dependencies-

    #   - run: mvn dependency:go-offline

    #   - save_cache:
    #       paths:
    #         - ~/.m2
    #       key: v1-dependencies-{{ checksum "pom.xml" }}

    #   # run tests!
    #   - run: mvn integration-test

  buildfed:
    docker:
      - image: circleci/node:10.0-browsers
    working_directory:  ~/frontend
    steps:
      - checkout
      - run: npm install
      - run: npm start

  build_db:
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: developer
          POSTGRES_PASSWORD: repoleved
          POSTGRES_DB: fmp_db

  build_api:
      - image: circleci/openjdk:8-jdk-browsers

    steps:
      - checkout

                          
workflows:
  version: 2
  build_and_test: # name of your workflow
    jobs:
      - build_fed
      - build_db:
        requires:
           - build1 # wait for build1 job to complete successfully before starting
           # see circleci.com/docs/2.0/workflows/ for more examples.
      - build3:
        requires:
           - build1 # wait for build1 job to complete successfully before starting
           # run build2 and build3 in parallel to save time.
